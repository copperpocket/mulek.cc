---
// src/pages/projects/index.astro
import MainLayout from "@/layouts/MainLayout.astro";
import BackgroundParticles from "@/components/BackgroundParticles.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

import ProjectCard from "@/components/ProjectCard.astro";

import "@/styles/global.css";


// 1. Define your Project Data
const projects = [
    // WebDev Category
    { title: "Portfolio Site v2", slug: "/blog/portfolio", category: "WebDev", tags: ["Astro.js", "TailwindCSS"], description: "The current site you are viewing, built with modern web technologies.", url: "#", github: "#" },
    { title: "Personal Blog", slug: "blog", category: "WebDev", tags: ["Astro.js", "Markdown"], description: "A blog where I share articles on various tech topics.", url: "#", github: "#" },
    // Automation/DevOps Category
    { title: "Homelab Overview", slug: "personal-network-diagram", category: "DevOps", tags: ["Proxmox", "TrueNAS", "OPNsense"], description: "Network diagram of my homelab environment.", url: "#", github: "#" },
    { title: "Mailcow", slug: "mailcow", category: "DevOps", tags: ["Mail server", "Self hosted"], description: "This article highlights my experience configuring mailcow server.", url: "#", github: "#" },
    
    // GameDev Category
    { title: "Duckcraft - World of Warcraft", slug: "world-of-warcraft", category: "GameDev", tags: ["Open-source", "C++"], description: "Powered by AzerothCore and Playerbots, a custom built WOTLK server.", url: "#", github: "#" },
    { title: "Quackshire - Minecraft", slug: "/blog/minecraft.md", category: "GameDev", tags: ["Java", "Spigot"], description: "A custom Minecraft server with unique plugins and features.", url: "#", github: "#" },
    
    
    // Add more projects here
];

// 2. Define the Categories (for the buttons)
const categories = ["WebDev", "DevOps", "GameDev"]; // Explicit list of filter buttons
---

<MainLayout>
    <BackgroundParticles minHeight="0" maxHeight="100%" particleCount={150} />
    <Header />

    <div id="projects-container" class="relative z-20 py-8 min-h-screen">
        
        <div class="container mx-auto px-4 ">
            <h1 class="text-3xl font-bold text-center mb-8 text-neutral-800 dark:text-neutral-200">
                My Projects
            </h1>

            <div id="filter-menu" class="flex flex-wrap justify-center gap-2 mb-8">
                <button
                    data-category="All"
                    class="filter-btn px-5 py-2 text-base font-bold rounded-full transition duration-300 
                        border-2 border-accent/70 shadow-md flex items-center gap-2
                        all-btn-default min-h-11 min-w-28"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                        <rect x="3" y="3" width="7" height="7"></rect>
                        <rect x="14" y="3" width="7" height="7"></rect>
                        <rect x="14" y="14" width="7" height="7"></rect>
                        <rect x="3" y="14" width="7" height="7"></rect>
                    </svg>
                    All
                </button>
                {categories.map(category => (
                    <button
                        data-category={category}
                        class="filter-btn px-4 py-2 text-sm font-semibold rounded-full transition duration-300 bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 hover:bg-neutral-300 dark:hover:bg-neutral-600 min-h-11 min-w-28"
                    >
                        {category}
                    </button>
                ))}
            </div>

            <div id="project-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
                {projects.map(project => (
                    <ProjectCard {...project} />
                ))}
            </div>
            
            <div id="empty-state" class="text-center py-10 text-neutral-600 dark:text-neutral-400 hidden">
                No projects match the current filter.
            </div>

        </div>
    </div>

    <Footer />
</MainLayout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const projectCards = document.querySelectorAll('.project-card');
        const emptyState = document.getElementById('empty-state');
        
        // --- Define the four distinct state classes for robust management ---
        
        // Category Buttons (WebDev, DevOps, GameDev)
        const categoryInactiveClasses = ['bg-neutral-200', 'dark:bg-neutral-700', 'text-neutral-800', 'dark:text-neutral-200', 'hover:bg-neutral-300', 'dark:hover:bg-neutral-600'];
        const categoryActiveClass = ['bg-accent', 'text-white'];

        // "All Projects" Button (Unique Style)
        // Note: The base unique style is in the HTML, we only need to define what changes
        const allButtonDefaultClasses = ['bg-white', 'dark:bg-neutral-800', 'text-accent'];
        const allButtonActiveClass = ['bg-accent', 'text-white', 'border-accent']; // Solid accent when active
        
        // --- Helper Function to manage filtering (no change needed here) ---

        function filterProjects(category: string) {
            let matches = 0;
            projectCards.forEach(card => {
                const cardCategory = card.getAttribute('data-category');
                const cardElement = card;
                if (category === 'All' || cardCategory === category) {
                    (cardElement as HTMLElement).style.display = 'flex'; 
                    matches++;
                } else {
                    (cardElement as HTMLElement).style.display = 'none';
                }
            });

            if (emptyState) {
                emptyState.style.display = matches === 0 ? 'block' : 'none';
            }
        }

        // --- Core Function to manage button state (now using classList) ---
        /**
         * @param {HTMLButtonElement} clickedButton
         */
        function setActiveButton(clickedButton: HTMLButtonElement) {
            filterButtons.forEach(btn => {
                const isAllButton = btn.getAttribute('data-category') === 'All';
                
                // 1. Reset ALL buttons to their inactive state
                if (isAllButton) {
                    btn.classList.remove(...allButtonActiveClass); // Remove active classes
                    btn.classList.add(...allButtonDefaultClasses);  // Apply default classes
                } else {
                    btn.classList.remove(...categoryActiveClass);   // Remove active classes
                    btn.classList.add(...categoryInactiveClasses);  // Apply inactive classes
                }
            });

            // 2. Set the CLICKED button to its active state
            if (clickedButton.getAttribute('data-category') === 'All') {
                clickedButton.classList.remove(...allButtonDefaultClasses);
                clickedButton.classList.add(...allButtonActiveClass);
            } else {
                clickedButton.classList.remove(...categoryInactiveClasses);
                clickedButton.classList.add(...categoryActiveClass);
            }
        }

        // --- Event Listeners and Initial Setup ---

        filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const buttonElement = e.currentTarget as HTMLButtonElement; // e.currentTarget is always the element the listener was attached to (the <button>)
                if (!buttonElement) return;
                const category = buttonElement.getAttribute('data-category');
                
                setActiveButton(buttonElement);
                filterProjects(category ?? 'All');

                // üîÅ Notify BackgroundParticles that layout changed
                window.dispatchEvent(new Event('particles:refresh'));
            });
        });
        
        // Initial setup: apply the default visual state to the "All Projects" button
        const allButton = document.querySelector('.filter-btn[data-category="All"]') as HTMLButtonElement | null;
        if (allButton) {
            // Apply the unique default style initially
            allButton.classList.add(...allButtonDefaultClasses);
            
            // Activate it as the default filter state
            setActiveButton(allButton);
            filterProjects('All');
        }
    });
</script>